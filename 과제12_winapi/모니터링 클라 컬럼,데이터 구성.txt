

1. 서버가 모니터링 클라이언트에게 보내주는 데이터

서버에서는 모니터링에 필요한 데이터를 초단위로 보내줄 것입니다.
데이터에는 아래 요소들이 들어갑니다.

a. ServerNo 또는 ServerID
b. Data Type
c. Data Value
+. Time (차후에 추가)

하나의 데이터당 저 위의 3가지 (실제 적용시에는 Time 까지 4가지) 를 보내줍니다.

# ServerNo / ServerID 는  서버의 구분을 위한 구분자 입니다.

우리야 학습단계이니 서버게 한대 있겠으나,
실제 서비스를 하는 경우라면 로그인서버 여러대 / 게임서버 수십대 / 채팅서버 수십대 ...
적으면 수십대에서 많게는 수백대의 서버를 다루게 됩니다.

그리고 그 서버마다 모두 같은 데이터를 생산하고 있게됩니다.

예) 1번 서버의 CPU 사용률 20%
예) 1번 서버의 메모리 사용량 1.5G
예) 2번 서버의 CPU 사용률 20%
예) 2번 서버의 메모리 사용량 1.5G

위처럼 데이터를 만들어야  모니터링 클라에서도 구분이 되겠습니다.
그래서 각각의 서버들은 자신의 구분자와 데이터 종류, 데이터 값 을 모두 보내주게 될 것입니다.

ServerNo, ServerID 의 타입은 상황에 맞도록 해주시면 됩니다.

일단 64bit int 를 샘플로 하였으나, 문자열이 될 수도 있으며 그냥 int 형이 될 수도 있습니다.



# Data Type

데이터 타입은 정말 데이터의 종류 입니다.

CPU 사용률, 메모리, 네트워크사용량, 접속 플레이어 수 ... 등등

데이터에 대한 종류이며 이는 서버개발시 필요한 데이터를 추가하고, 정리하여 지정합니다.

지금 우리는 그냥 어떤 임의의 0,1,2,3,4 이런 식으로 지정하여 사용 하겠습니다.


# Data Value

실제 데이터 입니다.  간단하게 32bit int 로 통일시켰으며 이 정도의 값이어도
대부분 표현이 가능 합니다. 모니터링에서 float, double 는 사용이 애매한 감이 있습니다.



# Time

이는 차후에 실제 적용시 추가될 부분 입니다만,
서버에서는 1초단위로 데이터를 보낸다고 해도 미묘하게 오차가 지속적으로 발생합니다.

1000ms 마다 보내도록 만들었으나 실제로는 990ms 마다 전달이 될 수도 있겠으며
이것이 누적되다보면 1초의 오차가 만들어지기도 합니다.

또는 어떤 사유로 특정 서버측에서 1~2초간 데이터를 보내지 못해
유실되는 경우도 있을 수 있습니다. 이를 대비하여 보정하기 위한 데이터로서
해당 서버의 초단위의 시간을 보내주고 있습니다.

지금은 작업하실 부분은 없으며 알고만 계시면 되겠습니다.






2. 네트워크로 수신된 데이터를 어떤 윈도우에게 ?

여러 윈도우 그래프와, 컬럼기능이 추가 되면서 더 난해한 부분이 발생합니다.

부모윈도우
 + 자식윈도우 : 서버1.CPU 
 + 자식윈도우 : 서버1.메모리
 + 자식윈도우 : 서버1.네트워크 수신 / 서버1.네트워크 송신
 + 자식윈도우 : 서버2.CPU
 + 자식윈도우 : 서버2.메모리
 + 자식윈도우 : 서버2.네트워크 수신 / 서버2.네트워크 송신
 + 자식윈도우 : 서버1.동시접속자 / 서버2.동시접속자

위 처럼 모니터링 클라이언트를 셋팅 하였다고 보겠습니다.

자식 모니터링 윈도우는 7개가 있으며,
각각의 윈도우마다 보여줄 데이터가 제각각입니다.

서버도 다르고 데이터 타입도 다릅니다.


여기에서  실제 데이터의 수신은  부모 윈도우가 일괄적으로 받도록 됩니다.
(네트워크 코드를 부모 윈도우쪽에 두어야 합니다)

데이터수신1 - 서버1.동시접속자.9000
데이터수신2 - 서버1.CPU.80
데이터수신3 - 서버2.동시접속자.8400
데이터수신4 - 서버2.CPU.40

문제는 이처럼 데이터를 4개 받았을때 각각의 데이터는 
어떤 윈도우에게 전달 되어야 하는가 ? 입니다.

또한 "하나의 수신 데이터는  한개의 자식 윈도우에게 전달된다" 도 성립이 안됩니다.
같은 데이터를 서로 다른 표현을 위해 여러 윈도우에서 사용도 해야합니다.


그렇다면 방법은 2가지 입니다.

1. 부모 윈도우가 자식윈도우 생성시  각각의 윈도우마다 필요로 하는 ServerNo,DataType 을 관리하여
데이터 수신시 이를 검색하여 적절한 윈도우에게 데이터를 전달 한다.

for ( 자식윈도우 리스트 순회 )
{
	if ( 해당 윈도우의 서버,타입 확인)
		pMonitorUnit->InsertData(ServerID,Type,Data)
}

장점. 정말 필요한 대상에게만 InsertData 를 하므로 효율적이다.
단점. MonitorUnit 윈도우에 컬럼으로 여러개의 데이터를 수신한다면 설계가 복잡함


2. 부모 윈도우는 데이터 수신시 모든 자식 윈도우에게 데이터를 전달하며
각각의 자식 윈도우들이 알아서 받을건 받고, 무시할건 무시한다.

장점. 구조가 깔끔하고 구현이 너무나 편리함
단점. 불필요한 InsertData 호출이 일어나므로 부담이 있음.


적절한걸 선택 하시면 되겠습니다.







