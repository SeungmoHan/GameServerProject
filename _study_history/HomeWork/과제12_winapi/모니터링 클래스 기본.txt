모니터링 프로그램의 자식윈도우 클래스

- 본 클래스 내부에서 자식 윈도우의 생성, 자식 윈도우의 프로시저, 데이터 등을 모두 가진다.


//// 자식 윈도우 클래스 헤더 ////////////////////////////

#define dfMAXCHILD		100

class CMonitorGraphUnit
{
public:

	enum TYPE
	{
		LINE_SINGLE,
		LINE_MULTI,
		NUMBER,
		ONOFF,
		PIE
	};

	typedef struct ST_HWNDtoTHIS
	{
		HWND			hWnd[dfMAXCHILD];
		CMonitorGraphUnit	*pThis[dfMAXCHILD];

	} stHWNDtoTHIS;

public:

	CMonitorGraphUnit(HINSTANCE hInstance, HWND hWndParent, TYPE enType, int iPosX, int iPosY, int iWidth, int iHeight);
	~CMonitorGraphUnit();

	/////////////////////////////////////////////////////////
	// 윈도우 프로시저
	/////////////////////////////////////////////////////////
	static LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);

	/////////////////////////////////////////////////////////
	// 데이터 넣기.
	/////////////////////////////////////////////////////////
	BOOL	InsertData(int iData);
	
protected:
	
	//------------------------------------------------------
	// 윈도우 핸들, this 포인터 매칭 테이블 관리.
	//------------------------------------------------------
	BOOL				PutThis(void);
	static CMonitorGraphUnit	*GetThis(HWND hWnd);

private:

	//------------------------------------------------------
	// 부모 윈도우 핸들, 내 윈도우 핸들, 인스턴스 핸들
	//------------------------------------------------------
	//------------------------------------------------------
	// 윈도우 위치,크기,색상, 그래프 타입 등.. 자료
	//------------------------------------------------------
	TYPE		_enGraphType;

	//------------------------------------------------------
	// 더블 버퍼링용 메모리 DC, 메모리 비트맵
	//------------------------------------------------------
	HDC		_hMemDC;
	HBITMAP		_hBitmap;




	//------------------------------------------------------
	// 데이터
	//------------------------------------------------------
	데이터 큐 / 리스트

	// static 맴버 함수의 프로시저에서 This 포인터를 찾기 위한
	// HWND + Class Ptr 의 테이블

};


///////////////////////////////////////////////////////////


* 위 클래스의 외부 사용법

CMonitorGraphUnit *p1;
CMonitorGraphUnit *p2;
CMonitorGraphUnit *p3;
CMonitorGraphUnit *p4;

- 임시로 포인터 변수 선언. 전역


case WM_CREATE:
  p1 = new CMonitorGraphUnit(g_hInst, hWnd, CMonitorGraphUnit::LINE_SINGLE, 10, 10, 200, 200);
  p2 = new CMonitorGraphUnit(g_hInst, hWnd, CMonitorGraphUnit::LINE_SINGLE, 220, 10, 200, 200);
  p3 = new CMonitorGraphUnit(g_hInst, hWnd, CMonitorGraphUnit::LINE_SINGLE, 430, 10, 400, 200);
  p4 = new CMonitorGraphUnit(g_hInst, hWnd, CMonitorGraphUnit::LINE_SINGLE, 10, 220, 300, 250);
  SetTimer(hWnd, 1, 100, NULL);

- 부모 왼도우 WM_CREATE 에서 자식 윈도우 클래스들 생성.
- 타이머도 생성.


case WM_TIMER:	
    p1->InsertData(rand() % 100);
    p2->InsertData(rand() % 100);
    p3->InsertData(rand() % 100); 
    p4->InsertData(rand() % 100);
    break;

- 타이머는 랜덤하게 데이터를 생성하여 모든 윈도우로 전송.




* 자식 윈도우는 데이터를 받은 뒤 자신의 InvalidateRect 를 호출하고
* 자식 윈도우 클래스 내부의 윈도우 프로시저 WM_PAINT 에서 그래프를 그린다.



* 자식 윈도우 생성하는 코드

// 부모 윈도우
   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

// 자식윈도우
_hWnd = CreateWindow(_szWindowClass, NULL, WS_CHILD | WS_VISIBLE | WS_CAPTION | WS_CLIPSIBLINGS,
						_iWindowPosX, _iWindowPosY, _iWindowWidth, _iWindowHeight, _hWndParent, NULL, _hInstance, NULL);

