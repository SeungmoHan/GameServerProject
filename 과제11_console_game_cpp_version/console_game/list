#pragma once

#ifndef __LIST_HEADER__
#define __LIST_HEADER__


template<typename T>
class list
{
private:
	struct Node
	{
		T data;
		Node* prev;
		Node* next;
	};
public:
	class iterator
	{
	private:
		Node* node;
	public:
		friend iterator list<T>::erase(iterator);
		iterator(Node* node = nullptr) : node(node) {};

		iterator operator++(int)
		{
			iterator iter(node);
			node = node->next;
			return iter;
		}
		iterator& operator++()
		{
			node = node->next;
			return *this;
		}
		iterator operator--(int)
		{
			iterator iter(node);
			node = node->prev;
			return iter;
		}
		iterator& operator--()
		{
			node = node->prev;
			return *this;
		}
		T& operator*()
		{
			return node->data;
		}
		T* operator->()
		{
			return node->data;
		}
		bool operator==(const iterator& other)
		{
			return other.node == this->node;
		}
		bool operator!=(const iterator& other)
		{
			return other.node != this->node;
		}
	};
public:
	list()
	{
		_head.next = &_tail;
		_tail.prev = &_head;
	}
	~list()
	{
		clear();
	}

	iterator begin()
	{
		return iterator(_head.next);
	}
	iterator end()
	{
		return iterator(&_tail);
	}

	void push_back(T data)
	{
		Node* newNode = new Node;
		newNode->data = data;
		newNode->next = &_tail;
		newNode->prev = _tail.prev;

		_tail.prev->next = newNode;
		_tail.prev = newNode;
		++_size;
	}

	void push_front(T data)
	{
		Node* newNode = new Node;
		newNode->data = data;
		newNode->prev = &_head;
		newNode->next = _head.next;

		_head.next->prev = newNode;
		_head.next = newNode;
		++_size;
	}
	void pop_front()
	{
		if (empty()) return;
		Node* deleteNode = _head.next;

		_head->next = deleteNode->next;
		_head->next->prev = deleteNode->prev;
		delete deleteNode;
		--_size;
	}
	void pop_back()
	{
		if (empty())return;
		Node* deleteNode = _tail.prev;

		_tail->prev = deleteNode->prev;
		_tail->prev->next = deleteNode->next;
		delete deleteNode;
		--_size;
	}
	iterator erase(iterator iter)
	{
		iterator retIter(iter.node->next);
		Node* deleteNode(iter.node);
		deleteNode->next->prev = deleteNode->prev;
		deleteNode->prev->next = deleteNode->next;
		delete deleteNode;
		--_size;
		return retIter;
	}
	void remove(T data)
	{
		iterator iter = begin();
		while (iter != end())
		{
			if (*iter == data)
			{
				erase(iter);
				return;
			}
			++iter;
		}
	}
	void clear()
	{
		while (_size > 0)
		{
			erase(begin());
			--_size;
		}
		_size = 0;
	}
	int size() { return _size; }
	bool empty() { return !_size; }
private:
	int _size = 0;
	Node _head;
	Node _tail;

};


#endif // !__LIST_HEADER__
