
- 패킹 or 언패킹 선택 > 패킹할 파일 개수 입력받기 >   각각의 파일이름 입력 받기 > 패킹!

- 언패킹 선택 > 패킹파일 입력받기 > 해당파일의 헤더를 분석하여 파일 분리 파일로 저장!


간략설명

//---------------------------------------------------------------
//
//  주행 패킹파일 헤더 (고정헤더)
//
//  Type	4 Byte		: 0x99886655  임의의 고정 헤더 구분자
//  FileNum	4 Byte		: 내부 파일 개수
//
//---------------------------------------------------------------

// ---- 내부 파일 이름 및 사이즈 ( FileNum 만큼 반복 ) -------------
// 
//  Size	4 Byte		: 파일 사이즈
//  char	128 Byte	: 파일 이름
//
//----------------------------------------------------------------

//---------------------------------------------------------------
//  파일 데이터 FileNum * Total File Size
//---------------------------------------------------------------



  이를 구조체로 포현하면 ~

//----------------------------------
// 패킹 파일 가장 앞 해더
//----------------------------------
typedef struct st_PACK_HEADER_
{
	unsigned int iType;	// 0x99886655 이 들어감.
	int iFileNum;
} stPACK_HEADER;

//----------------------------------
// 내부 파일 정보
//----------------------------------
typedef struct st_PACK_FILEINFO_
{
	int iFileSize;
	char szFileName[128];

} stPACK_FILEINFO;


합치고자 하는 여러개의 파일 정보를 최 상단에 싸그리 저장 후  
그 이후에는 파일의 실제 내용들을 연타로 쭉쭉쭉쭉 넣음.



파일패킹 과정

1. 합치고자 하는 파일의 존재유무 확인.

2. 합치고자 하는 파일들의 이름,사이즈 얻기

3. 패킹파일을 열어서 stPACK_HEADER 헤더 저장

4. 패킹파일에 파일헤더 stPACK_FILEINFO 개수만큼 저장

5. 합칠 파일들을 하나씩 열면서 내용 패킹 파일로 저장



파일언패킹 과정

1. 패킹파일 오픈

2. 패킹파일 stPACK_HEADER 해더 읽기.  Type 확인 패킹파일 확인.

4. 파일개수 확인

5. 파일 개수만큼 stPACK_FILEINFO 헤더 읽기

6. 파일 개수만큼 돌면서 stPACK_FILEINFO[N] 의 정보로 파일생성

7. 사이즈만큼 읽어서 저장

8. 끝.. 